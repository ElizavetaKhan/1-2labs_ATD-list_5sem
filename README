1. Необходимо в отдельном пакете реализовать АТД Список на массиве (необходимые операции (открытые методы) перечислены ниже). Переменная last может быть либо первым свободным элементом в массиве, либо последним занятым. Тогда элементы массива до last занято, после last – свободно.
2. Необходимо в отдельном пакете реализовать АТД Список на связном списке.
3. Реализовать класс с методом main(), в котором реализовано удаление дубликатов из списка с использоанием АТД Список. Метод main() должен правильно работать как с одним, так и с другим представлениями. При этом в классе можно менять только импортируемый пакет.
Абстрактный тип данных (АТД) «Список»
Список – последовательность элементов определенного типа (все одного):
a1, a2, …, an,
где n >= 0, n – длина списка.
Если n >= 1, то a1 – первый элемент списка, an - последний элемент списка.
n = 0 – список пустой.
Важное свойство списка – его элементы можно линейно упорядочить, в соответствии с их позицией в списке. Элемент ai предшествует элементу ai+1 для i = 1, 2, …, n-1, ai следует за ai-1 для i = 2, 3, …, n. Элемент ai имеет позицию i. За последним элементом списка располагается позиция после последнего.
L – список, x – объект (тип совпадает с типом значений списка), p – позиция в списке.
Операции (указаны все и явные, и неявные параметры):
END(L) – возвращает позицию после последнего.
INSERT(x, p, L)
a1, a2, …, an
вставим x в позицию p
a1, a2, …, ap-1, x, ap, …, an
вставим x в позицию END(L)
a1, a2, …, an, x
Если позиции p в списке L нет, то результат неопределен (ничего не делать).
LOCATE(x, L) – возвращает позицию в списке L объекта x. Если объекта в списке нет, то возвращается позиция END(L). Если несколько значений, совпадает со значением x, то возвращается первая позиция от начала.
RETRIEVE(p, L) – возвращается объект списка L в позиции p. Результат неопределен, если p=END(L) или в L нет позиции p (выбросить исключение).
DELETE(p, L) – удалить элемент списка L в позиции p.
a1, a2, …, an
после удаления
a1, a2, …, ap-1, ap+1, …, an
Результат неопределен, если в списке L нет позиции p или p=END(L) (ничего не делать).
NEXT(p, L) – возвращает следующую за p позицию в списке L. Если p – последняя позиция в списке L, то NEXT(p, L) = END(L). Результат неопределен, если p нет в списке или p=END(L) (выбросить исключение)
PREVIOUS(p, L) – возвращает предыдущую перед p позицию в списке L. Результат неопределен, если p = 1, p = END(L) или позиции p нет в списке L (выбросить исключение).
MAKENULL(L) – делает список пустым.
FIRST(L) – возвращает 1-ую позицию в списке L. Если список пустой, то возвращается END(L).
PRINTLIST(L) – вывод списка на печать в порядке расположения элементов в списке.
Общие требования:
1. Не использовать коллекции.
2. Не использовать доступ по умолчанию. Указывать доступ для всего, классов, данных, методов.
3. Для всех классов перед каждым методом (кроме main()),в комментариях должно быть записано: какую задачу решает метод, какие параметры ему передаются, что возвращается в результате.
4. Для всех объявленных в методах переменных, включая метод main(), в комментариях необходимо указать их назначение.
5. Все важные для понимания методов моменты должны сопровождаться комментариями.
Отчет по лабораторной работе
Содержание отчета:
* Условие задачи.
* Листинг программы.
* Исходные данные и результаты их обработки программой.
Отчет по лабораторной работе представляется в электронном виде в формате, предусмотренном шаблоном отчета по лабораторной работе. Защита отчета проходит в форме доклада студента по выполненной работе и ответов на вопросы преподавателя.
В случае если оформление отчета и поведение студента во время защиты соответствуют указанным требованиям, студент получает максимальное количество баллов.
Основаниями для снижения количества баллов в диапазоне от max до min являются:
* реализован неэффективный алгоритм по памяти и/или количеству операций;
* не проведена оптимизация повторов, ветвлений;
* полное или частичное отсутствие комментариев.
Отчет не может быть принят и подлежит доработке в случае:
* неправильной работы программы для всех или некоторых входных данных;
* отсутствия необходимых разделов;
* неполного выполнения задания по лабораторной работе.
